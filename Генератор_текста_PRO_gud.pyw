from pydub import AudioSegment
import sys
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QLabel, QLineEdit, QPushButton, QFileDialog, QSpinBox,
    QSlider, QMessageBox, QTextEdit, QVBoxLayout, QWidget, QComboBox, QFrame, QHBoxLayout
)
from PyQt6.QtCore import QThread, pyqtSignal, Qt
from PyQt6.QtGui import QPalette, QColor, QFont, QIcon
import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer
from gtts import gTTS
import os
import pygame
import re

class TextToSpeechThread(QThread):
    finished = pyqtSignal(str)

    def __init__(self, text, language, pitch_shift):
        super().__init__()
        self.text = text
        self.language = language
        self.pitch_shift = pitch_shift

    def run(self):
        filename = "generated_speech.mp3"
        modified_filename = "modified_speech.mp3"
        try:
            tts = gTTS(text=self.text, lang=self.language)
            tts.save(filename)
            sound = AudioSegment.from_file(filename, format="mp3")
            new_sample_rate = int(sound.frame_rate * (2.0 ** (self.pitch_shift / 12.0)))
            sound_with_changed_pitch = sound._spawn(sound.raw_data, overrides={'frame_rate': new_sample_rate})
            sound_with_changed_pitch = sound_with_changed_pitch.set_frame_rate(44100)
            sound_with_changed_pitch.export(modified_filename, format="mp3")
            pygame.mixer.init()
            pygame.mixer.music.load(modified_filename)
            pygame.mixer.music.play()
            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)
            self.finished.emit("–ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ.")
        finally:
            pygame.mixer.music.stop()
            pygame.mixer.quit()
            if os.path.exists(filename):
                os.remove(filename)
            if os.path.exists(modified_filename):
                os.remove(modified_filename)

class GPT2Generator:
    def __init__(self, model_path):
        self.tokenizer = GPT2Tokenizer.from_pretrained(model_path)
        self.model = GPT2LMHeadModel.from_pretrained(model_path)

    def generate_text(self, input_text, temperature_value, length_value, num_results, no_repeat_ngram_size):
        input_ids = self.tokenizer.encode(input_text, return_tensors='pt')
        attention_mask = torch.ones(input_ids.shape, dtype=torch.long, device=input_ids.device)
        outputs = self.model.generate(
            input_ids=input_ids,
            attention_mask=attention_mask,
            max_length=length_value,
            num_return_sequences=num_results,
            no_repeat_ngram_size=no_repeat_ngram_size,
            repetition_penalty=1.5,
            temperature=temperature_value,
            do_sample=True
        )
        result_text = ""
        for i, output in enumerate(outputs):
            generated_text = self.tokenizer.decode(output, skip_special_tokens=True)
            result_text += f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i + 1}:\n{generated_text}\n\n{'-'*40}\n\n"
        return result_text

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ùêÜùêèùêì ùêÇùêáùêÄùêì")
        self.setGeometry(0, 0, 800, 600)
        self.setWindowIcon(QIcon("C:/Users/Olviw/OneDrive/–î–æ–∫—É–º–µ–Ω—Ç—ã/GitHub/GUI_GPT_2/ico/–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤.ico"))
        self.gpt2_generator = None
        self.initUI()
        self.setStyle()

    def initUI(self):
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.text_input = QLineEdit(self)
        self.text_input.setPlaceholderText("üëâ  –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...  üëà")
        layout.addWidget(QLabel("‚ùì –í–æ–ø—Ä–æ—Å ‚ùì"))
        layout.addWidget(self.text_input)

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp_layout = QHBoxLayout()
        self.temp_slider = QSlider(Qt.Orientation.Horizontal, self)
        self.temp_slider.setMinimum(1)
        self.temp_slider.setMaximum(1000)
        self.temp_slider.setValue(1)
        self.temp_slider.valueChanged.connect(self.update_temp_label)
        self.temp_value_label = QLabel("üî•–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:0.0000000001üî•", self)
        temp_layout.addWidget(self.temp_slider)
        temp_layout.addWidget(self.temp_value_label)
        layout.addLayout(temp_layout)

        # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        self.length_spinbox = QSpinBox(self)
        self.length_spinbox.setMinimum(1)
        self.length_spinbox.setMaximum(102400)
        self.length_spinbox.setValue(1)
        layout.addWidget(QLabel("üåö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ üåö"))
        layout.addWidget(self.length_spinbox)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.num_results_spinbox = QSpinBox(self)
        self.num_results_spinbox.setMinimum(1)
        self.num_results_spinbox.setMaximum(10)
        self.num_results_spinbox.setValue(1)
        layout.addWidget(QLabel("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üî¢"))
        layout.addWidget(self.num_results_spinbox)

        # –†–∞–∑–º–µ—Ä n-–≥—Ä–∞–º–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        self.no_repeat_ngram_size_spinbox = QSpinBox(self)
        self.no_repeat_ngram_size_spinbox.setMinimum(1)
        self.no_repeat_ngram_size_spinbox.setMaximum(10)
        self.no_repeat_ngram_size_spinbox.setValue(2)
        layout.addWidget(QLabel("üîÑ –†–∞–∑–º–µ—Ä n-–≥—Ä–∞–º–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π üîÑ"))
        layout.addWidget(self.no_repeat_ngram_size_spinbox)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        self.model_button = QPushButton("üìÇ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å üìÇ", self)
        layout.addWidget(self.model_button)
        self.model_button.clicked.connect(self.choose_model)

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        self.generate_button = QPushButton("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç üí°", self)
        layout.addWidget(self.generate_button)
        self.generate_button.clicked.connect(self.generate_text)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_text = QTextEdit(self)
        layout.addWidget(QLabel("üîΩ –û—Ç–≤–µ—Ç üîΩ"))
        layout.addWidget(self.result_text)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª üíæ", self)
        layout.addWidget(self.save_button)
        self.save_button.clicked.connect(self.save_to_file)

        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏
        self.voice_combobox = QComboBox(self)
        self.voice_combobox.addItems(["ru", "en"])
        layout.addWidget(QLabel("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è üåè"))
        layout.addWidget(self.voice_combobox)

        # –¢–µ–º–±—Ä
        pitch_layout = QHBoxLayout()
        self.pitch_slider = QSlider(Qt.Orientation.Horizontal, self)
        self.pitch_slider.setMinimum(-16)
        self.pitch_slider.setMaximum(16)
        self.pitch_slider.setValue(0)
        pitch_layout.addWidget(QLabel("üìâ–¢–µ–º–±—Ä (–≥–æ–ª–æ—Å–∞)üìà"))
        pitch_layout.addWidget(self.pitch_slider)
        layout.addLayout(pitch_layout)

        # –ö–Ω–æ–ø–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        self.speech_button = QPushButton("üîä –û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç üîä", self)
        layout.addWidget(self.speech_button)
        self.speech_button.clicked.connect(self.convert_to_speech)

    def setStyle(self):
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(25, 25, 25))
        palette.setColor(QPalette.ColorRole.WindowText, QColor(230, 230, 230))
        palette.setColor(QPalette.ColorRole.Base, QColor(20, 20, 20))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(45, 45, 45))
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.ToolTipText, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.Text, QColor(230, 230, 230))
        palette.setColor(QPalette.ColorRole.Button, QColor(55, 55, 55))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(230, 230, 230))
        self.setPalette(palette)
        font = QFont("Arial", 10)
        self.setFont(font)

    def choose_model(self):
        model_path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥–µ–ª–∏")
        if model_path:
            self.gpt2_generator = GPT2Generator(model_path)

    def update_temp_label(self, value):
        temperature = 10 ** (- (1000 - value) / 100)
        self.temp_value_label.setText(f"üî•–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:{temperature:.10f}üî•")

    def generate_text(self):
        text = self.text_input.text()
        if not text or not self.gpt2_generator:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            return

        temperature = 10 ** (- (1000 - self.temp_slider.value()) / 100)
        length_value = self.length_spinbox.value()
        num_results = self.num_results_spinbox.value()
        no_repeat_ngram_size = self.no_repeat_ngram_size_spinbox.value()

        try:
            generated_text = self.gpt2_generator.generate_text(
                text, temperature, length_value, num_results, no_repeat_ngram_size
            )
            self.result_text.setPlainText(generated_text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

    def convert_to_speech(self):
        text = self.result_text.toPlainText()
        if not text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
            return

        selected_language = self.voice_combobox.currentText()
        pitch_shift = self.pitch_slider.value()
        self.tts_thread = TextToSpeechThread(text, selected_language, pitch_shift)
        self.tts_thread.finished.connect(self.show_message_box)
        self.tts_thread.start()

    def save_to_file(self):
        dialog = QFileDialog(self)
        dialog.setDefaultSuffix(".txt")
        dialog.setNameFilter("Text files (*.txt)")
        dialog.setAcceptMode(QFileDialog.AcceptMode.AcceptSave)
        if dialog.exec():
            selected_file = dialog.selectedFiles()[0]
            with open(selected_file, 'w', encoding='utf-8') as file:
                file.write(self.result_text.toPlainText())
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {selected_file}")

    def show_message_box(self, message):
        QMessageBox.information(self, "–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ", message)

app = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(app.exec())
