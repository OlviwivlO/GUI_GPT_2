import sys
import os
from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QTextEdit,
    QPushButton,
    QLabel,
    QLineEdit,
    QVBoxLayout,
    QWidget,
    QFormLayout,
    QTabWidget,
    QProgressBar,
    QMessageBox,
    QFileDialog
)
from PyQt6.QtCore import QThread, pyqtSignal
from PyQt6.QtGui import QIcon
from transformers import GPT2Tokenizer, GPT2Config, GPT2LMHeadModel


class ModelThread(QThread):
    update_text_signal = pyqtSignal(str)
    model_saved_signal = pyqtSignal()
    progress_signal = pyqtSignal(int)

    def __init__(self, config):
        super().__init__()
        self.config = config

    def run(self):
        try:
            if not os.path.exists(self.config['tokenizer_path']):
                self.update_text_signal.emit(f"–ü—É—Ç—å –∫ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.config['tokenizer_path']}")
                return
            
            self.update_text_signal.emit("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä")
            tokenizer = GPT2Tokenizer.from_pretrained(self.config['tokenizer_path'])

            self.update_text_signal.emit("–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            model_config = GPT2Config(
                vocab_size=tokenizer.vocab_size,
                n_layer=self.config['n_layer'],
                n_head=self.config['n_head'],
                n_embd=self.config['n_embd'],
                intermediate_size=self.config['intermediate_size'],
                hidden_size=self.config['hidden_size'],
                max_position_embeddings=self.config['max_position_embeddings'],
                num_attention_heads=self.config['num_attention_heads'],
                bos_token_id=tokenizer.bos_token_id,
                eos_token_id=tokenizer.eos_token_id,
                pad_token_id=tokenizer.pad_token_id,
                sep_token_id=tokenizer.sep_token_id,
                activation_function=self.config['activation_function'],
                initializer_range=self.config['initializer_range'],
                layer_norm_eps=self.config['layer_norm_eps'],
                scale_attn_by_inverse_layer_idx=self.config['scale_attn_by_inverse_layer_idx'],
                reorder_and_upcast_attn=self.config['reorder_and_upcast_attn'],
                use_cache=self.config['use_cache'],
                attention_probs_dropout_prob=self.config['attention_probs_dropout_prob'],
                hidden_dropout_prob=self.config['hidden_dropout_prob']
            )

            self.update_text_signal.emit("–°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            model = GPT2LMHeadModel(config=model_config)
            model.resize_token_embeddings(len(tokenizer), mean_resizing=True)
            self.update_text_signal.emit("–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞.")

            if self.config['gradient_checkpointing']:
                model.gradient_checkpointing_enable()

            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            self.progress_signal.emit(50)
            
            self.update_text_signal.emit("–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä.")
            model.save_pretrained(self.config['model_save_path'])
            tokenizer.save_pretrained(self.config['model_save_path'])
            self.update_text_signal.emit("–ú–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
            self.progress_signal.emit(100)
            self.model_saved_signal.emit()
        except Exception as e:
            self.update_text_signal.emit(f"–û—à–∏–±–∫–∞: {str(e)}")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ùêçùêÑùêñ ùêåùêéùêÉùêÑùêã ùêÜùêèùêì")
        self.setGeometry(0, 0, 250, 500)
        self.setWindowIcon(QIcon("C:/Users/Olviw/OneDrive/–î–æ–∫—É–º–µ–Ω—Ç—ã/GitHub/GUI_GPT_2/ico/–°–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.ico"))
        
        self.initUI()

    def initUI(self):
        self.tabs = QTabWidget(self)
        self.setCentralWidget(self.tabs)

        self.createModelTab()
        self.createSettingsTab()

        self.model_thread = None

    def createModelTab(self):
        self.modelTab = QWidget()
        self.tabs.addTab(self.modelTab, "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ üîÑ")

        layout = QVBoxLayout()

        self.text_edit = QTextEdit(self)
        self.text_edit.setReadOnly(True)

        self.progress_bar = QProgressBar(self)
        self.progress_bar.setValue(0)

        self.exit_button = QPushButton("üåû –í—ã—Ö–æ–¥ üåû", self)
        self.exit_button.setEnabled(False)
        self.exit_button.clicked.connect(self.close)

        layout.addWidget(self.text_edit)
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.exit_button)
        
        self.modelTab.setLayout(layout)

    def createSettingsTab(self):
        self.settingsTab = QWidget()
        self.tabs.addTab(self.settingsTab, "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üî®")

        layout = QFormLayout()

        self.tokenizerPathEdit = QLineEdit()
        self.modelSavePathEdit = QLineEdit()
        self.nLayerEdit = QLineEdit("8")                 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤
        self.nHeadEdit = QLineEdit("8")                  # –ß–∏—Å–ª–æ –≥–æ–ª–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è
        self.nEmbdEdit = QLineEdit("256")                # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.intermediateSizeEdit = QLineEdit("1024")      # –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è
        self.hiddenSizeEdit = QLineEdit("512")            # –†–∞–∑–º–µ—Ä —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
        self.maxPositionEmbeddingsEdit = QLineEdit("1024") # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.numAttentionHeadsEdit = QLineEdit("64")      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è
        self.gradientCheckpointingEdit = QLineEdit("True") # –í–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.activationFunctionEdit = QLineEdit("gelu")   # –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        self.initializerRangeEdit = QLineEdit("0.02")    # –î–∏–∞–ø–∞–∑–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.layerNormEpsEdit = QLineEdit("1e-5")        # –≠–ø—Å–∏–ª–æ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è
        self.scaleAttnByInverseLayerIdxEdit = QLineEdit("True") # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
        self.reorderAndUpcastAttnEdit = QLineEdit("True") # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏—è
        self.useCacheEdit = QLineEdit("True")  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
        self.attentionProbsDropoutProbEdit = QLineEdit("0.1")  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—Ä–æ–ø–∞—É—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è
        self.hiddenDropoutProbEdit = QLineEdit("0.1")  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—Ä–æ–ø–∞—É—Ç–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤

        layout.addRow("–ü—É—Ç—å –∫ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä—É:", self.tokenizerPathEdit)
        layout.addRow("–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:", self.modelSavePathEdit)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–µ–π
        self.tokenizerButton = QPushButton("üìÇ –í—ã–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä üìÇ")
        self.tokenizerButton.clicked.connect(self.choose_tokenizer_path)
        layout.addRow(self.tokenizerButton)

        self.modelSaveButton = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ üìÅ")
        self.modelSaveButton.clicked.connect(self.choose_model_save_path)
        layout.addRow(self.modelSaveButton)

        layout.addRow("üîº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ üîΩ", self.nLayerEdit)
        layout.addRow("üîº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ üîΩ", self.nHeadEdit)
        layout.addRow("üîº –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ üîΩ", self.nEmbdEdit)
        layout.addRow("üîº –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä üîΩ", self.intermediateSizeEdit)
        layout.addRow("üîº –°–∫—Ä—ã—Ç—ã–π —Ä–∞–∑–º–µ—Ä üîΩ", self.hiddenSizeEdit)
        layout.addRow("üîº –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ üîΩ", self.maxPositionEmbeddingsEdit)
        layout.addRow("üîº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è üîΩ", self.numAttentionHeadsEdit)
        layout.addRow("üí• –ö–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ üí•", self.gradientCheckpointingEdit)
        layout.addRow("üí• –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ üí•", self.activationFunctionEdit)
        layout.addRow("üí• –î–∏–∞–ø–∞–∑–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ üí•", self.initializerRangeEdit)
        layout.addRow("üí• –≠–ø—Å–∏–ª–æ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–µ–≤ üí•", self.layerNormEpsEdit)
        layout.addRow("üí• –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–ª–æ—è üí•", self.scaleAttnByInverseLayerIdxEdit)
        layout.addRow("üí• –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ üí•", self.reorderAndUpcastAttnEdit)
        layout.addRow("üí• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ üí•", self.useCacheEdit)
        layout.addRow("üí• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—Ä–æ–ø–∞—É—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è üí•", self.attentionProbsDropoutProbEdit)
        layout.addRow("üí• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—Ä–æ–ø–∞—É—Ç–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤ üí•", self.hiddenDropoutProbEdit)

        self.start_button = QPushButton("üîÑ –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ üîÑ")
        self.start_button.clicked.connect(self.start_model_creation)

        layout.addWidget(self.start_button)
        
        self.settingsTab.setLayout(layout)

    def choose_tokenizer_path(self):
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–æ–º")
        if directory:
            self.tokenizerPathEdit.setText(directory)

    def choose_model_save_path(self):
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        if directory:
            self.modelSavePathEdit.setText(directory)

    def start_model_creation(self):
        try:
            config = {
                'tokenizer_path': self.tokenizerPathEdit.text(),
                'model_save_path': self.modelSavePathEdit.text(),
                'n_layer': int(self.nLayerEdit.text()),
                'n_head': int(self.nHeadEdit.text()),
                'n_embd': int(self.nEmbdEdit.text()),
                'intermediate_size': int(self.intermediateSizeEdit.text()),
                'hidden_size': int(self.hiddenSizeEdit.text()),
                'max_position_embeddings': int(self.maxPositionEmbeddingsEdit.text()),
                'num_attention_heads': int(self.numAttentionHeadsEdit.text()),
                'gradient_checkpointing': self.gradientCheckpointingEdit.text().lower() == 'true',
                'activation_function': self.activationFunctionEdit.text(),
                'initializer_range': float(self.initializerRangeEdit.text()),
                'layer_norm_eps': float(self.layerNormEpsEdit.text()),
                'scale_attn_by_inverse_layer_idx': self.scaleAttnByInverseLayerIdxEdit.text().lower() == 'true',
                'reorder_and_upcast_attn': self.reorderAndUpcastAttnEdit.text().lower() == 'true',
                'use_cache': self.useCacheEdit.text().lower() == 'true',
                'attention_probs_dropout_prob': float(self.attentionProbsDropoutProbEdit.text()),
                'hidden_dropout_prob': float(self.hiddenDropoutProbEdit.text())
            }

            self.model_thread = ModelThread(config)
            self.model_thread.update_text_signal.connect(self.update_text_edit)
            self.model_thread.model_saved_signal.connect(self.model_saved)
            self.model_thread.progress_signal.connect(self.update_progress_bar)
            self.progress_bar.setValue(0)
            self.model_thread.start()
            self.start_button.setEnabled(False)
            self.exit_button.setEnabled(True)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def update_text_edit(self, text):
        self.text_edit.append(text)

    def model_saved(self):
        # –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        self.start_button.setEnabled(True)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
        self.exit_button.setEnabled(True)


    def update_progress_bar(self, value):
        self.progress_bar.setValue(value)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
