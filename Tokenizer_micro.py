import sys
import os
import json
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton, QFileDialog, QTextEdit, QLabel, QFormLayout, QStatusBar, QLineEdit, QSpinBox
)
from PyQt6.QtGui import QFont, QIcon
from PyQt6.QtCore import Qt
from tokenizers import Tokenizer, models, trainers, pre_tokenizers, decoders

class TokenizerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ùêìùêéùêäùêÑùêçùêàùêôùêÑùêë")
        self.setGeometry(0, 0, 800, 600)
        self.setWindowIcon(QIcon("C:/Users/Olviw/OneDrive/–î–æ–∫—É–º–µ–Ω—Ç—ã/GitHub/GUI_GPT_2/ico/–¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä zero.ico"))

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        self.default_tokens = [
            '<unk>', '<s>', '</s>', '<pad>', '<mask>',   # –ë–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            '<sep>', '<cls>', '<user>', '<assistant>',   # –¢–æ–∫–µ–Ω—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
            '<action>', '<content>', '<summary>',        # –¢–æ–∫–µ–Ω—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            '<url>', '<web>',                            # –¢–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–¥–∞–Ω–Ω—ã–º–∏

            # –ü—Ä–æ–±–µ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
            ' ', ',', '.', '!', '‚Äî', '-', ';', ':', '(', ')', '"', '?', '¬´', '¬ª', "'", '[', ']', '‚Ä¶',
            '{', '}', '/', '\\', '|', '@', '#', '$', '%', '^', '&', '*', '_', '+', '=', '~', '`', '<', '>', '‚Äû',
    
            # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã)
            '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø',
            '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è',
    
            # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã)
            '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–Å', '–ñ', '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü',
            '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–´', '–¨', '–≠', '–Æ', '–Ø',
    
            # –õ–∞—Ç–∏–Ω–∏—Ü–∞ (–º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã)
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
            'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    
            # –õ–∞—Ç–∏–Ω–∏—Ü–∞ (–±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã)
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    
            # –¶–∏—Ñ—Ä—ã
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            '‚â†', '‚âà', '¬±', '‚àö', '‚àû', '‚à´', '‚àë', '‚àè', '‚àÇ', '‚àá', '‚Üí', '‚Üê', '‚áî', '‚àÄ', '‚àÉ', '‚àß', '‚à®', '‚ä•', '‚äÇ', '‚äÉ', 'Œò',
    
            # –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
            '‚ÇΩ', '$', '‚Ç¨', '¬£', '¬•', '‚Ç¥', '‚Çπ', '‚Ç©', '‡∏ø', '‚Çø', '¬¢', '‡ß≥',
            
            # –ü—Ä–æ—á–∏–µ —Å–∏–º–≤–æ–ª—ã
            '¬∞', '¬©', '¬Æ', '‚Ñ¢', '¬ß', '¬∂',

            #  –î–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏)
            '√°', '√©', '√≠', '√≥', '√∫', '√±', '√º', '√§', '√∂', '√ü', '√ß'          
        ]

        self.initUI()

    def initUI(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        font = QFont("Segoe UI", 12)
        self.setFont(font)

        # Input for tokens
        self.tokens_text_edit = QTextEdit()
        self.tokens_text_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: <unk>, <s>, </s>, <pad>, <mask>, <sep>, <cls>, <user>, <assistant>, <action>, <content>, <summary>, <url>, <web>")
        self.tokens_text_edit.setText(', '.join(self.default_tokens))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.tokens_text_edit.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF; border: 1px solid #444;")
        self.tokens_text_edit.setFont(QFont("Segoe UI", 14))

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ vocab_size
        self.vocab_size_input = QSpinBox()
        self.vocab_size_input.setMinimum(1)
        self.vocab_size_input.setMaximum(1024000000)
        self.vocab_size_input.setValue(512)  # –ó–∞–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.vocab_size_input.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF; border: 1px solid #444;")
        self.vocab_size_input.setFont(QFont("Segoe UI", 14))

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ max_len
        self.max_len_input = QSpinBox()
        self.max_len_input.setMinimum(1)
        self.max_len_input.setMaximum(1024000000)
        self.max_len_input.setValue(2048)  # –ó–∞–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.max_len_input.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF; border: 1px solid #444;")
        self.max_len_input.setFont(QFont("Segoe UI", 14))

        # Output directory selection
        self.output_dir_line_edit = QLineEdit()
        self.output_dir_line_edit.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        self.output_dir_line_edit.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF; border: 1px solid #444;")
        self.output_dir_line_edit.setFont(QFont("Segoe UI", 14))

        self.output_dir_button = QPushButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É üìÇ")
        self.output_dir_button.setStyleSheet("background-color: #808080; color: #FFFFFF; border: none; padding: 10px; border-radius: 5px;")
        self.output_dir_button.setFont(QFont("Segoe UI", 14))
        self.output_dir_button.clicked.connect(self.select_output_dir)

        # Start button
        self.start_button = QPushButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä ‚úÖ")
        self.start_button.setStyleSheet("background-color: #006400; color: #FFFFFF; border: none; padding: 10px; border-radius: 5px;")
        self.start_button.setFont(QFont("Segoe UI", 14))
        self.start_button.clicked.connect(self.create_tokenizer)

        # Layout setup
        form_layout = QFormLayout()
        form_layout.addRow(QLabel("üìñ –¢–æ–∫–µ–Ω—ã üìñ"), self.tokens_text_edit)
        form_layout.addRow(QLabel("üìë –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è (vocab_size) üìë"), self.vocab_size_input)
        form_layout.addRow(QLabel("üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (max_len) üìè"), self.max_len_input)
        form_layout.addRow(QLabel("üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è üìÅ"), self.output_dir_line_edit)
        form_layout.addRow(self.output_dir_button)

        layout.addLayout(form_layout)
        layout.addWidget(self.start_button)

        # Status bar
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.setStyleSheet("background-color: #333; color: #FFFFFF; font: 12pt 'Segoe UI';")

    def select_output_dir(self):
        dir_path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if dir_path:
            self.output_dir_line_edit.setText(dir_path)

    def create_tokenizer(self):
        output_dir = self.output_dir_line_edit.text()
        tokens_text = self.tokens_text_edit.toPlainText()

        if not output_dir:
            self.status_bar.showMessage("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        if not tokens_text:
            self.status_bar.showMessage("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã.")
            return

        vocab_size = self.vocab_size_input.value()
        max_len = self.max_len_input.value()

        self.status_bar.showMessage("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        try:
            tokens = [token.strip() for token in tokens_text.split(',') if token.strip()]
            self.generate_tokenizer(output_dir, tokens, vocab_size, max_len)
            self.status_bar.showMessage("–¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞: {str(e)}")

    def generate_tokenizer(self, output_dir, tokens, vocab_size, max_len):
        tokenizer = Tokenizer(models.BPE())
        tokenizer.pre_tokenizer = pre_tokenizers.ByteLevel(add_prefix_space=True)
        tokenizer.decoder = decoders.ByteLevel()

        trainer = trainers.BpeTrainer(
            vocab_size=vocab_size,
            special_tokens=tokens,
            show_progress=True
        )

        data = self.tokens_text_edit.toPlainText().splitlines()
        tokenizer.train_from_iterator(data, trainer)

        tokenizer_json_path = os.path.join(output_dir, "tokenizer.json")
        tokenizer.save(tokenizer_json_path)

        vocab = tokenizer.get_vocab()
        with open(os.path.join(output_dir, "vocab.json"), 'w', encoding='utf-8') as f:
            json.dump(vocab, f, ensure_ascii=False, indent=4)

        with open(tokenizer_json_path, 'r', encoding='utf-8') as f:
            tokenizer_data = json.load(f)
            merges = tokenizer_data['model']['merges']
            with open(os.path.join(output_dir, "merges.txt"), 'w', encoding='utf-8') as merges_file:
                for merge in merges:
                    merges_file.write(f"{merge}\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª special_tokens_map.json
        special_tokens = {
            "unk_token": "<unk>",
            "bos_token": "<s>",
            "eos_token": "</s>",
            "pad_token": "<pad>",
            "mask_token": "<mask>",
            "sep_token": "<sep>",
            "cls_token": "<cls>",
            "user_token": "<user>",
            "assistant_token": "<assistant>",
            "action_token": "<action>",
            "content_token": "<content>",
            "summary_token": "<summary>",
            "url_token": "<url>",
            "web_token": "<web>"
        }
        with open(os.path.join(output_dir, "special_tokens_map.json"), 'w', encoding='utf-8') as f:
            json.dump(special_tokens, f, ensure_ascii=False, indent=4)

        with open(os.path.join(output_dir, "tokenizer_config.json"), 'w', encoding='utf-8') as f:
            json.dump({
                "max_len": max_len,
                "do_lower_case": False
            }, f, ensure_ascii=False, indent=4)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = TokenizerApp()
    window.show()
    sys.exit(app.exec())
